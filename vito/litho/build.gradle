/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

apply plugin: 'com.android.library'
apply plugin: 'maven'

apply from: rootProject.file('release.gradle')

dependencies {
    compileOnly "com.google.code.findbugs:jsr305:${JSR_305_VERSION}"
    compileOnly "javax.annotation:javax.annotation-api:${ANNOTATION_API_VERSION}"

    implementation "androidx.core:core:${versions.androidx.core}"
    implementation "com.facebook.litho:litho-annotations:${versions.litho}"
    implementation "com.facebook.litho:litho-core:${versions.litho}"
    implementation "com.facebook.litho:litho-widget:${versions.litho}"

    annotationProcessor "com.facebook.litho:litho-processor:${versions.litho}"

    implementation project(':drawee')
    implementation project(':fbcore')
    implementation project(':vito:core')
    implementation project(':vito:options')
    implementation project(':vito:provider')
    implementation project(':ui-common')

    testImplementation "junit:junit:${JUNIT_VERSION}"
    testImplementation "org.assertj:assertj-core:${versions.assertjCore}"
    testImplementation "org.mockito:mockito-core:${MOCKITO_CORE_VERSION}"
    testImplementation("org.robolectric:robolectric:${ROBOLECTRIC_VERSION}") {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    compile project(path: ':imagepipeline')
}

android {
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
    }

    lintOptions {
        abortOnError false
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task testJar(type: Jar) {
    from android.sourceSets.test.java.srcDirs
    classifier = 'sources'
}

artifacts.add('archives', sourcesJar)
